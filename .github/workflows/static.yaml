---
name: Build binary releases
concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}
on:
  workflow_dispatch:
permissions:
  contents: write
  id-token: write
  attestations: write
env:
  IMAGE_NAME: dunglas/frankenphp
  GOTOOLCHAIN: local
jobs:
  prepare:
    runs-on: ubuntu-24.04
    outputs:
      push: false
      platforms: ${{ steps.matrix.outputs.platforms }}
      metadata: ${{ steps.matrix.outputs.metadata }}
      gnu_metadata: ${{ steps.matrix.outputs.gnu_metadata }}
      ref: ${{ steps.check.outputs.ref }}
    steps:
      - name: Get version
        id: check
        if: github.event_name == 'schedule'
        run: |
          ref="${{ (github.ref_type == 'tag' && github.ref_name) || (github.event_name == 'workflow_dispatch' && inputs.version) || '' }}"
          if [[ -z "${ref}" ]]; then
            ref="$(gh release view --repo dunglas/frankenphp --json tagName --jq '.tagName')"
          fi

          echo "ref=${ref}" >> "${GITHUB_OUTPUT}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.check.outputs.ref }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Create platforms matrix
        id: matrix
        run: |
          METADATA="$(docker buildx bake --print static-builder-musl | jq -c)"
          GNU_METADATA="$(docker buildx bake --print static-builder-gnu | jq -c)"
          {
            echo metadata="${METADATA}"
            echo platforms="$(jq -c 'first(.target[]) | .platforms' <<< "${METADATA}")"
            echo gnu_metadata="${GNU_METADATA}"
          } >> "${GITHUB_OUTPUT}"
        env:
          SHA: ${{ github.sha }}
          VERSION: ${{ steps.check.outputs.ref || 'dev' }}
  build-linux-gnu:
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.platforms) }}
    name: Build ${{ matrix.platform }} static GNU binary
    runs-on: ${{ startsWith(matrix.platform, 'linux/arm') && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    needs: [prepare]
    steps:
      - name: Prepare
        id: prepare
        run: |
          platform=${{ matrix.platform }}
          echo "sanitized_platform=${platform//\//-}" >> "${GITHUB_OUTPUT}"
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.ref }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}
      - name: Build
        id: build
        uses: docker/bake-action@v6
        with:
          pull: true
          load: ${{ !fromJson(needs.prepare.outputs.push) }}
          targets: static-builder-gnu
          set: |
            ${{ (github.event_name == 'pull_request' || matrix.platform == 'linux/arm64') && 'static-builder-gnu.args.NO_COMPRESS=1' || '' }}
            static-builder-gnu.args.BUILD_PACKAGES=1
            static-builder-gnu.args.PHP_EXTENSIONS=bcmath,calendar,ctype,curl,dom,exif,ffi,fileinfo,filter,gd,iconv,intl,mbregex,mbstring,mysqli,mysqlnd,opcache,openssl,pcntl,pdo,pdo_mysql,posix,readline,redis,session,simplexml,sockets,sodium,tokenizer,xml,xmlreader,xmlwriter,xsl,zip,zlib
            *.tags=
            *.platform=${{ matrix.platform }}
            *.cache-from=type=gha,scope=${{ needs.prepare.outputs.ref || github.ref }}-static-builder-gnu
            *.cache-from=type=gha,scope=refs/heads/main-static-builder-gnu
            *.cache-to=type=gha,scope=${{ needs.prepare.outputs.ref || github.ref }}-static-builder-gnu,ignore-error=true
            ${{ fromJson(needs.prepare.outputs.push) && format('*.output=type=image,name={0},push-by-digest=true,name-canonical=true,push=true', env.IMAGE_NAME) || '' }}
        env:
          SHA: ${{ github.sha }}
          VERSION: ${{ (github.ref_type == 'tag' && github.ref_name) || needs.prepare.outputs.ref || 'dev' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     
      - name: Copy all frankenphp* files
        run: |
          # shellcheck disable=SC2034
          digest=$(jq -r '."static-builder-gnu"."${{ fromJson(needs.prepare.outputs.push) && 'containerimage.digest' || 'containerimage.config.digest' }}"' <<< "${METADATA}")
          container_id=$(docker create --platform=${{ matrix.platform }} "${{ fromJson(needs.prepare.outputs.push) && '${IMAGE_NAME}@${digest}' || '${digest}' }}")
          mkdir -p gh-output
          cd gh-output
          for file in $(docker run --rm "${{ fromJson(needs.prepare.outputs.push) && '${IMAGE_NAME}@${digest}' || '${digest}' }}" sh -c "ls /go/src/app/dist | grep '^frankenphp'"); do
            docker cp "${container_id}:/go/src/app/dist/${file}" "./${file}"
          done
          docker rm "${container_id}"
          mv "${BINARY}" "${BINARY}-gnu"
        env:
          METADATA: ${{ steps.build.outputs.metadata }}
          BINARY: frankenphp-linux-${{ matrix.platform == 'linux/amd64' && 'x86_64' || 'aarch64' }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: frankenphp-linux-${{ matrix.platform == 'linux/amd64' && 'x86_64' || 'aarch64' }}-gnu-files
          path: gh-output/*
      - name: Run sanity checks
        run: |
          "${BINARY}" version
          "${BINARY}" list-modules | grep frankenphp
          "${BINARY}" list-modules | grep http.encoders.br
          "${BINARY}" list-modules | grep http.handlers.mercure
          "${BINARY}" list-modules | grep http.handlers.mercure
          "${BINARY}" list-modules | grep http.handlers.vulcain
          "${BINARY}" php-cli -r "echo 'Sanity check passed';"
        env:
          BINARY: ./gh-output/frankenphp-linux-${{ matrix.platform == 'linux/amd64' && 'x86_64' || 'aarch64' }}-gnu
  build-mac:
    strategy:
      fail-fast: false
      matrix:
        platform: ["arm64"]
    name: Build macOS ${{ matrix.platform }} binaries
    runs-on: ${{ matrix.platform == 'arm64' && 'macos-14' || 'macos-13' }}
    needs: [prepare]
    env:
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.ref }}
      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache-dependency-path: |
            go.sum
            caddy/go.sum
      - name: Set FRANKENPHP_VERSION
        run: |
          if [ "${GITHUB_REF_TYPE}" == "tag" ]; then
            export FRANKENPHP_VERSION=${GITHUB_REF_NAME:1}
          elif [ "${GITHUB_EVENT_NAME}" == "schedule" ]; then
            export FRANKENPHP_VERSION="${{ needs.prepare.outputs.ref }}"
          else
            export FRANKENPHP_VERSION=${GITHUB_SHA}
          fi

          echo "FRANKENPHP_VERSION=${FRANKENPHP_VERSION}" >> "${GITHUB_ENV}"
      - name: Build FrankenPHP
        run: ./build-static.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE: ${{ (needs.prepare.outputs.ref || github.ref_type == 'tag') && '1' || '' }}
          NO_COMPRESS: ${{ github.event_name == 'pull_request' && '1' || '' }}
      - if: needs.prepare.outputs.ref || github.ref_type == 'tag'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ${{ github.workspace }}/dist/frankenphp-mac-*
      - name: Upload artifact
        if: github.ref_type == 'branch'
        uses: actions/upload-artifact@v4
        with:
          name: frankenphp-mac-${{ matrix.platform }}
          path: dist/frankenphp-mac-${{ matrix.platform }}
      - name: Run sanity checks
        run: |
          "${BINARY}" version
          "${BINARY}" build-info
          "${BINARY}" list-modules | grep frankenphp
          "${BINARY}" list-modules | grep http.encoders.br
          "${BINARY}" list-modules | grep http.handlers.mercure
          "${BINARY}" list-modules | grep http.handlers.mercure
          "${BINARY}" list-modules | grep http.handlers.vulcain
          "${BINARY}" php-cli -r "echo 'Sanity check passed';"
        env:
          BINARY: dist/frankenphp-mac-${{ matrix.platform }}
